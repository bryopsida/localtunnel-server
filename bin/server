#!/usr/bin/env node
require('dotenv')
const {program} = require('commander')
const {createLogger} = require('../lib/Logger')
const createServer = require('../server')

const logOpts = {
    name: 'localtunnel'
}

const log = createLogger(logOpts)


const argv = program
    .option('-p, --port <num>', 'listen on this port for outside requests', '3000')
    .option('-s, --secure', 'use this flag to indicate proxy over https', false)
    .option('-a, --address <ip>', 'IP address to bind to', '0.0.0.0')
    .option('-d, --domain <domain>', 'Specify the base domain name. This is optional if hosting localtunnel from a regular example.com domain. This is required if hosting a localtunnel server from a subdomain (i.e. lt.example.dom where clients will be client-app.lt.example.come)')
    .option('--max-sockets <num>', 'maximum number of tcp sockets each client is allowed to establish at one time (the tunnels)', '10')
    .parse(process.argv).opts();

const server = createServer({
    max_tcp_sockets: argv['max-sockets'],
    secure: argv.secure,
    domain: argv.domain,
});

server.listen(argv.port, argv.address, () => {
    log.info('server listening on port: %d', server.address().port);
});

process.on('SIGINT', () => {
    process.exit();
});

process.on('SIGTERM', () => {
    process.exit();
});

process.on('uncaughtException', (err) => {
    log.error(err);
});

process.on('unhandledRejection', (reason, promise) => {
    log.error(reason);
});